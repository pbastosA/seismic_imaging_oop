#!/bin/bash

library="/usr/local/cuda/lib64/"
include="/usr/local/cuda/include/"

gaussian="../src/utils/smoothing/gaussian.cpp"
trilinear="../src/utils/interpolation/trilinear.cpp"
file_manager="../src/utils/file_manager/file_manager.cpp"

eiko_m="../src/model/eikonal_model/eikonal_model.cpp"
tomo_m=""

geometry="../src/geometry/geometry.cpp"
regular="../src/geometry/regular/regular.cpp"
circular="../src/geometry/circular/circular.cpp"
geometry_main="../src/geometry/geometry_main.cpp"

picking="../src/utils/auto_picking/auto_picking.cpp"
qc_picks="../src/utils/auto_picking/qc_picking.py"

eikonal="../src/eikonal/eikonal.cpp"
classic="../src/eikonal/classic/classic.cpp"
block_FIM="../src/eikonal/block_FIM/block_FIM.cpp"
kernel_FIM="../src/eikonal/block_FIM/cuda_kernel.cu"
accurate_FSM="../src/eikonal/accurate_FSM/accurate_FSM.cpp"
eikonal_main="../src/eikonal/eikonal_main.cpp"

tomography=""
classical_approach=""

flags="-acc -fast -ta=tesla,cc60"

USER_MESSAGE="
Usage:

--------------------------------------------------------------------------------------------
|         Inputs          |           Modeling           |            Inversion            |
-------------------------------------------------------------------------------------------|  
| $ $0 \033[31m-build_all\033[m      | $ $0 -eikonal             | $ $0 -tomography             |
| $ $0 -auto_picking   | $ $0 -check_travel_time   | $ $0 -check_recovered_model  |
| $ $0 -check_data     | $ $0 -check_illumination  | $ $0 -check_convergence      |
| $ $0 -check_model    | $ $0 -check_first_arrival | $ $0 -check_data_difference  |
| $ $0 -check_geometry |                              | $ $0 -check_model_difference |
--------------------------------------------------------------------------------------------         
"

# Check if user provide some parameter
[ -z "$1" ] && {
	echo " "
	echo "You didn't provide any parameter!" 
	echo "Type $0 -help for more info"
	echo " "  
	exit 1 
}

case "$1" in

-help ) 
	echo -e "$USER_MESSAGE"
	exit 0
;;

-build_all) 

    echo -e "Compiling stand-alone executables!"

    echo -e "\n../bin/\033[31mgeometry.exe\033[m: \n" 
    pgc++ $file_manager $geometry $circular $regular $geometry_main -lm -o ../bin/geometry.exe

    echo -e "\n../bin/\033[31meikonal.exe\033[m: \n" 
    pgc++ $file_manager $trilinear $gaussian $eiko_m $geometry $regular $circular $eikonal $classic $kernel_FIM $block_FIM $accurate_FSM $eikonal_main $flags -I $include -L $library -lm -o ../bin/eikonal.exe 
    
    echo -e "\n../bin/\033[31mtomography.exe\033[m: \n" 
    # tomography_main

    rm *.o

	exit 0
;;

-auto_picking) 

    g++ $file_manager $picking -lm -O3 -o ../bin/auto_picking.exe
    ./../bin/auto_picking.exe parameters.txt

	exit 0
;;

-check_data) 

    python3 ../src/utils/py_codes/check_picking.py parameters.txt 

	exit 0
;;

-check_model) 
    
    python3 ../src/utils/py_codes/check_model.py parameters.txt

	exit 0
;;

-check_geometry) 

    ./../bin/geometry.exe parameters.txt
    python3 ../src/utils/py_codes/check_geometry.py parameters.txt

	exit 0
;;

-eikonal) 

    ./../bin/eikonal.exe parameters.txt

	exit 0
;;

-check_travel_time) 

    python3 ../src/utils/py_codes/check_travel_time.py parameters.txt

	exit 0
;;

-check_illumination) 

    python3 ../src/utils/py_codes/check_illumination.py parameters.txt

	exit 0
;;

-check_first_arrival) 

    python3 ../src/utils/py_codes/check_first_arrival.py parameters.txt

	exit 0
;;

-tomography) 


	exit 0
;;

* ) ## Message for bad parameter
	
	echo -e "\033[31mERRO: Option $1 unknown!\033[m"
	echo -e "\033[31mType $0 -h for help \033[m"
	exit 3
;;

esac



# cgls="../../src/cgls/cgls.cu"
# utils="../../src/essentials/utils.cpp"
# model="../../src/essentials/model.cpp"
# eikonal="../../src/eikonal/eikonal.cpp"
# geometry="../../src/essentials/geometry.cpp"
# tomography="../../src/tomography/tomography.cpp"

# library="/usr/local/cuda/lib64/"
# include="/usr/local/cuda/include/"

# flags="-acc -fast -ta=tesla,cc60 -std=c++11 -g -lm -lcusparse -lcublas"

# pgc++ $cgls $utils $model $geometry $eikonal $tomography tomography_main.cpp $flags -I $include -L $library -o tomography_main.exe

# ./tomography_main.exe ../parameters.txt

# # Clean it up
# rm *.o *.exe 
